import nmap
from datetime import datetime

def generate_report(scan_data, output_file):
    report = f"""
    <html>
    <head>
        <title>Nmap Scan Report</title>
    </head>
    <body>
        <h1>Nmap Scan Report</h1>
        <p><strong>Date of Scan:</strong> {datetime.now().strftime('%Y-%m-%d')}</p>
        <p><strong>Scan Summary:</strong></p>
        <ul>
            <li><strong>Scanned Hosts:</strong> {scan_data['scanned_hosts']}</li>
            <li><strong>Vulnerabilities Found:</strong> {scan_data['vulnerabilities_found']}</li>
        </ul>
        
        <h2>Vulnerability Details</h2>
        <table border="1">
            <tr>
                <th>Host</th>
                <th>Port</th>
                <th>Service</th>
                <th>Vulnerability</th>
            </tr>
    """
    for result in scan_data['results']:
        report += f"""
        <tr>
            <td>{result['host']}</td>
            <td>{result['port']}</td>
            <td>{result['service']}</td>
            <td>{result['vulnerability']}</td>
        </tr>
        """
    
    report += """
        </table>
    </body>
    </html>
    """
    
    with open(output_file, 'w') as f:
        f.write(report)
    
    print(f"Report generated and saved to {output_file}")

def run_nmap_scan(targets):
    nm = nmap.PortScanner()
    scan_data = {
        'scanned_hosts': len(targets),
        'vulnerabilities_found': 0,
        'results': []
    }
    
    print(f"Running Nmap scan on {targets}...")
    nm.scan(hosts=targets, arguments='-sV --script vuln')
    
    for host in nm.all_hosts():
        for proto in nm[host].all_protocols():
            ports = nm[host][proto].keys()
            for port in ports:
                service = nm[host][proto][port]['name']
                # Assume all open ports have vulnerabilities for this demo
                scan_data['vulnerabilities_found'] += 1
                scan_data['results'].append({
                    'host': host,
                    'port': port,
                    'service': service,
                    'vulnerability': 'Potential vulnerability detected'
                })
    
    return scan_data

if __name__ == "__main__":
    targets = input("Enter the target IPs or subnets (e.g., 192.168.1.0/24): ")
    output_file = "nmap_scan_report.html"
    
    scan_data = run_nmap_scan(targets)
    generate_report(scan_data, output_file)
